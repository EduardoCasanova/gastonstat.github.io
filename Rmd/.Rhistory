center_data(1:10)
center_data(m)
center_data(iris[1:5,1:4])
hey(iris[1:5,1:4])
center_data(Inf)
center_data("sdfs")
center_data(NA)
center_data(NaN)
is.numeric(NaN)
is_numeric(data)
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_tabular_numeric(data)) {
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
return(centering(data, weights))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(1:5)
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data))}
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_tabular_numeric(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data))}
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
return(centering(data, weights))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(1:5)
center_data(m)
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data))}
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_numeric_tabular(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data))}
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
return(centering(data, weights))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(m)
center_data(iris[1:5,1:4])
is_numeric_tabular(iris[1:5,1:4])
center_data(riris)
center_data(iris)
centering(iris[1:4,1:4])
centering(iris[1:4,1:4], rep(1,4))
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data)) }
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_numeric_tabular(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data)) }
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
return(centering(data, weights))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
library(tester)
weighted_average <- function(v, weights = NULL)
{
# output
if (!is_numeric_vector(v))
stop("\n'weighted_average()' requires a numeric vector")
if (is.null(weights))
weights = rep(1, length(v))
sum(v * weights) / sum(weights)
}
#' @title Center Data
#' @description Mean center data
#' @param data a numeric vector, matrix or data.frame
#' @param weights optional vector of weights
#' @export
#' @examples
#' # center vector
#' center_data(1:10)
#'
#' # center matrix
#' m = matrix(1:9, 3, 3)
#' center_data(m)
#'
#' # center data frame
#' center_data(iris[1:5,1:4])
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data)) }
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_numeric_tabular(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data)) }
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
return(centering(data, weights))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(1:10)
m = matrix(1:9, 3, 3)
center_data(m)
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data)) }
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_numeric_tabular(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data)) }
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
centers = apply(x, 2, weighted_average, w)
return(sweep(x, 2, centers, FUN = "-"))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(m)
center_data <- function(data, weights = NULL)
{
if (has_nas(data))
stop("\n'data' contains missing or infinite values")
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data)) }
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_numeric_tabular(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data)) }
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
centers = apply(data, 2, weighted_average, weights)
return(sweep(data, 2, centers, FUN = "-"))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(1:10)
center_data(m)
center_data(iris)
is_numeric_tabular(iris)
has_nas(iris)
center_data <- function(data, weights = NULL)
{
if (!is.null(weights)) {
if (!is_numeric_vector(weights))
stop("\n'center_data()' requires numeric 'weights'")
}
# data as vector
if (is_numeric_vector(data)) {
if (is.null(weights)) { weights = rep(1, length(data)) }
if (different_length(data, weights))
stop("\n'data' and 'weights' have different length")
centered = data - weighted_average(data, weights)
return(centered)
} else {
# data as matrix or data.frame
if (is_numeric_tabular(data)) {
if (is.null(weights)) { weights = rep(1, nrow(data)) }
if (nrow(data) != length(weights))
stop("\n'data' and 'weights' have different length")
centers = apply(data, 2, weighted_average, weights)
return(sweep(data, 2, centers, FUN = "-"))
} else {
stop("\n'data_center()' requires a numeric argument")
}
}
}
center_data(1:10)
center_data(c(1:5,NA))
center_data(iris)
center_data(iris[1:5,1:4])
center_data(m)
file_dir = "/Users/Gaston/Documents/Teaching/Datasets/"
cars2004 = read.csv(paste(file_dir, "cars2004.csv", sep=""),
row.names=1, header=TRUE)
X = scale(cars2004)
SVD = svd(X)
U = SVD$u
D = diag(SVD$d^2)
V = SVD$v
dim(D)
dim(V)
dim(cars)
dimM(X)
dim(X)
dim(U)
U = SVD$u[,1:3]
D = diag(SVD$d[1:3]^2)
V = SVD$v[,1:3]
dim(U)
dim(V)
dim(V)
dim(D)
scores = U
loadings = D %*% t(V)
library(FactoMineR)
pca = PCA(cars2004, ncp=3)
head(pca$ind$coord)
head(scores)
scores = U %*% D
loadings = V
head(pca$ind$coord)
head(scores)
D = diag(SVD$d[1:3])
scores = U %*% D
head(pca$ind$coord)
head(scores)
cor(pca$ind$coord, scores)
eig_vals = cars_princomp$sdev^2
eigs = cbind(
eigenvalues = eig_vals,
percentage = eig_vals / sum(eig_vals),
cumulative = cumsum(eig_vals))
cars_prcomp = prcomp(cars2004, scale. = TRUE)
eig_vals = cars_prcomp$sdev^2
eigs = cbind(
eigenvalues = eig_vals,
percentage = eig_vals / sum(eig_vals),
cumulative = cumsum(eig_vals))
eigs
round(eigs, 3)
eigs = cbind(
eigenvalues = eig_vals,
percentage = 100 * eig_vals / sum(eig_vals),
cumulative = cumsum(eig_vals))
# loadings
round(eigs, 3)
eigs = cbind(
eigenvalues = eig_vals,
percentage = 100 * eig_vals / sum(eig_vals),
cumulative = cumsum(percentage))
# loadings
round(eigs, 3)
eig_vals = cars_prcomp$sdev^2
eigs = cbind(
eigenvalues = eig_vals,
percentage = 100 * eig_vals / sum(eig_vals),
cumulative = cumsum(100 * eig_vals / sum(eig_vals)))
# loadings
round(eigs, 3)
round(head(cars_prcomp$rotation, 5), 2)
cars_prcomp$rotation
cor(cars_prcomp$rotation, cars2004)
cor(cars_prcomp$x, cars2004)
cor(cars2004, cars_prcomp$x)
head(cor(cars2004, cars_prcomp$x[,1:2]), 3)
head(cor(cars2004, cars_prcomp$x[,1:2]))
round(cor(cars2004, cars_prcomp$x[,1:2]), 3)
round(cor(cars2004, cars_prcomp$x[,1:2]), 4)
library(FactoMineR)
cars_pca = PCA(cars2004, graph = FALSE)
cars_pca
cars_pca$eig
round(cars_pca$var$coord ), 4)
round(cars_pca$var$coord), 4)
round(cars_pca$var$coord, 4)
cars_pca
cars_pca$var$contrib
cars_pca$var$cos2
colSums(ars_pca$var$contrib)
colSums(cars_pca$var$contrib)
rbind(cars_pca$var$contrib,
colSums(cars_pca$var$contrib))
rbind(cars_pca$var$contrib,
total = colSums(cars_pca$var$contrib))
rbind(cars_pca$var$contrib,
TOTAL = colSums(cars_pca$var$contrib))
print(rbind(cars_pca$var$contrib,
TOTAL = colSums(cars_pca$var$contrib), print.gap=3)
)
print(rbind(cars_pca$var$contrib,
TOTAL = colSums(cars_pca$var$contrib)), print.gap=3)
1/6
print(round(cars_pca$ind$contrib[,1:3], 3), print.gap = 3)
1/nrow(cars2004)
nrow(cars2004)
100/nrow(cars2004)
print(round(cars_pca$ind$contrib[,1:2], 3),
print.gap = 3)
cars_pca$ind$coord[,1] / cars_pca$eig[1,1]
cars_pca$ind$coord[,1]^2 / cars_pca$eig[1,1]
sum(cars_pca$ind$coord[,1]^2 / cars_pca$eig[1,1])
sum(cars_pca$ind$coord[,1]^2 / cars_pca$eig[1,1]) / 24
(1/24) * cars_pca$ind$coord[,1]^2 / cars_pca$eig[1,1]
100/24
plot(cars_pca, choix = "ind")
cars_pca
?PCA
dimdesc(cars_pca, aces = 1:2)
dimdesc(cars_pca, axes = 1:2)
dimdesc(cars_pca, axes = 1:3)
barplot(cars_pca$ind$contrib[,1])
abline(4.16, col = "tomato")
abline(h = 4.16, col = "tomato")
abline(h = 4.16, col = "gary50")
barplot(cars_pca$ind$contrib[,1])
abline(h = 4.16, col = "gary50")
abline(h = 4.16, col = "gray50")
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2)
abline(h = 4.16, col = "gray50")
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2, cex.names=0.5)
op = par(mar = c(8, 2, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2, cex.names=0.5)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mar = c(8, 2, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2, cex.names=0.8)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mar = c(8, 2, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004)), cex.names=0.8)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mar = c(8, 2, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mar = c(6, 2, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
abline(h = 4.16, col = "gray50")
par(op)
title("Objects Contributions on PC1", cex.main = 0.9)
op = par(mar = c(6, 3, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC1", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mfrow = c(2,1), mar = c(6, 3, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC1", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
barplot(cars_pca$ind$contrib[,2], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC2", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
par(op)
barplot(cars_pca$ind$contrib[,2], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
?par
op = par(mfrow = c(2,1), mar = c(6, 3, 2, 2))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC1", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
barplot(cars_pca$ind$contrib[,2], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC2", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mfrow = c(2,1))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC1", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
barplot(cars_pca$ind$contrib[,2], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC2", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
par(op)
op = par(mfrow = c(2,1))
barplot(cars_pca$ind$contrib[,1], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC1", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
barplot(cars_pca$ind$contrib[,2], border = NA, las = 2,
names.arg = abbreviate(rownames(cars2004), 8), cex.names=0.8)
title("Objects Contributions on PC2", cex.main = 0.9)
abline(h = 4.16, col = "gray50")
par(op)
install.packages("mvtnorm")
library(FactoMineR)
pca3 = PCA(USArrests, graph = FALSE)
pca3$eig
pca3$var$coord
pca3$ind$coord
head(pca3$ind$coord)
library(ade4)
pca4 = dudi.pca(USArrests, nf = 5, scannf = FALSE)
pca4$eig
pca4$c1
pca4$co
head(pca4$li)
library(amap)
pca5 = acp(USArrests)
pca5$sdev
pca5$loadings
head(pca5$scores)
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("/Users/Gaston/Desktop/myjekyll/blog/Rmd")
KnitPost("2012-06-17-PCA-in-R.Rmd")
pca2 = princomp(USArrests, cor = TRUE)
pca2$sdev
head(pca2$loadings)
head(pca2$scores)
pca2$loadings
unclass(pca2$loadings)
KnitPost("2012-06-17-PCA-in-R.Rmd")
